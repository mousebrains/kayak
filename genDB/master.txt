pragma journal_mode=WAL; -- WriteAheadJournal
pragma synchronous=1;    -- 

DROP TABLE IF EXISTS Master;
CREATE TABLE Master (key INTEGER PRIMARY KEY AUTOINCREMENT, -- HASH
                     qNoShow INTEGER DEFAULT 0, -- Do not display this record
                     created INTEGER DEFAULT (strftime('%s', 'now')), -- date this record was created
                     modified INTEGER DEFAULT (strftime('%s', 'now')), -- date record was modified
                     nature TEXT, -- Character of river segment
                     class TEXT, -- River classification, 1-6
                     difficulties TEXT, -- Difficulties encountered on this section
                     displayName TEXT, -- Name displayed for this section
                     drainage TEXT, -- Which drainage is this section in?
                     drainageArea DOUBLE, -- Area of this drainage
                     elevation DOUBLE, -- Altitude of gauge
                     elevationLost DOUBLE, -- Feet lost in this section
                     features TEXT, -- Interesting features on this segment
                     gradient DOUBLE, -- Feet/Mile for this segment
                     latitudePutin DOUBLE DEFAULT -1000000, -- Latitude of put-in
                     longitudePutin DOUBLE DEFAULT -1000000, -- Longitude of put-in
                     latitudeTakeout DOUBLE DEFAULT -1000000, -- Latitude of take-out
                     longitudeTakeout DOUBLE DEFAULT -1000000, -- Longitude of take-out
                     location TEXT, -- gauge location, if not the same as the gauge
                     length DOUBLE, -- Length of segment in miles
                     lowFlow DOUBLE, -- Low flow level
                     highFlow DOUBLE, -- High flow level
                     lowGauge DOUBLE, -- Low gauge level
                     highGauge DOUBLE, -- High gauge level
                     optimalLowFlow DOUBLE, -- low end of Optimal level for running this segment
                     optimalHighFlow DOUBLE, -- high end of Optimal level for running this segment
                     notes TEXT, -- Notes describing this section
                     region TEXT, -- Region within a state this section is in
                     remoteness TEXT, -- How remote is this section
                     riverName TEXT, -- Name to display for the river name for this section
                     scenery TEXT, -- Type of scenery on this section
                     season TEXT, -- Which season is the section runable
                     section TEXT, -- Section name for this record
                     sortKey TEXT, -- How to sort this entry
                     state TEXT, -- State(s) this segment is located in
                     watershedType TEXT, -- Type of watershed
                     gaugeKey INTEGER DEFAULT 0, -- which gauge this entry uses
                     gaugeName TEXT -- which gauge this entry uses
                     );
CREATE TRIGGER MasterModified AFTER UPDATE ON Master BEGIN
  UPDATE Master SET modified=strftime('%s', 'now') WHERE key=new.key;
END;
CREATE INDEX stateMasterIndex on Master(state);
CREATE INDEX gaugeKeyMasterIndex on Master(gaugeKey);

DROP TABLE IF EXISTS GuideBooks;
CREATE TABLE GuideBooks (bookKey INTEGER PRIMARY KEY AUTOINCREMENT, -- key to guide book
                         name TEXT, -- Name of the guide book
                         author TEXT, -- Author of the guide book
                         edition TEXT, -- which edition of the guide book
                         url TEXT UNIQUE, -- URL link to book site
                         urlBase TEXT -- URL base used for guide entries
                        );
CREATE INDEX bookKeyGuideBooks on GuideBooks(bookKey);

DROP TABLE IF EXISTS Guides;
CREATE TABLE Guides (key INTEGER DEFAULT 0, -- key into Master
                     bookKey INTEGER DEFAULT 0, -- key into GuideBooks table
                     name TEXT, -- Run name 
                     pageNumber TEXT, -- Page number 
                     url TEXT, -- URL link, may use urlBase from GuideBooks
                     PRIMARY KEY (key, bookKey, pageNumber, runNumber, url) 
                    );
CREATE INDEX keyGuidesIndex on Guides(key);
CREATE INDEX bookKeyGuidesIndex on Guides(bookKey);
